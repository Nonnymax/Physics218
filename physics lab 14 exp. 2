{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 621
    },
    "id": "av6eeGDxsvfi",
    "outputId": "f03903e7-41d3-471e-e887-61f27a11e2ea"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#PHSX 216 & 218 plotting code\n",
    "#Brianna Beller\n",
    "#Updated February 2023\n",
    "\n",
    "#import packages and libraries, assign shortcut names\n",
    "%matplotlib inline\n",
    "from __future__ import division #only used if running python 2\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "#-----------------------------------------------------------------------#\n",
    "#Data Section - Create Arrays for data. Perform necessary calculations.\n",
    "#CHANGE THE VARIABLE NAMES and numbers to match your data\n",
    "\n",
    "xvariable_sinθ = np.array([-0.02941435036,-0.01510244406,0,0.01536277009,0.02993449588]) #what are units?\n",
    "yvariable_p = np.array([-2,-1,0,1,2]) #what are units?\n",
    "\n",
    "\n",
    "#-----------------------------------------------------------------------#\n",
    "#Create array for uncertainties in y variable\n",
    "#CHANGE THE VARIABLE NAME and numbers to match your data \n",
    "\n",
    "err_yvariable_Error_p = np.array([0.25,0.25,0.25,0.25,0.25])\n",
    "\n",
    "\n",
    "#-----------------------------------------------------------------------#\n",
    "#--------------------------Plotting Code Below--------------------------#\n",
    "#-----------------------------------------------------------------------#\n",
    "\n",
    "#UPDATE THIS SECTION!!!\n",
    "\n",
    "#Re-assign variables as x, y, dy so that the remaining plotting code may remain generic\n",
    "x = xvariable_sinθ             #this should be the array you want to plot on the x axis\n",
    "y = yvariable_p           #this should be the array you want to plot on the y axis\n",
    "dy = err_yvariable_Error_p        #this should be your error in y array\n",
    "\n",
    "\n",
    "#update each of these 4 strings\n",
    "plot_title= 'A plot of p vs sinθ'\n",
    "x_label= 'sinθ'\n",
    "y_label= 'p'\n",
    "slope_units= ''\n",
    "\n",
    "#update annotation placement with integer from 1 to 4, top R corner is 1 (counter-clockwise from there)\n",
    "annotation_placement=2 \n",
    "\n",
    "\n",
    "#-----------------------------------------------------------------------#\n",
    "#Don't need to change anything in this section!\n",
    "\n",
    "#Find the intercept and slope, b and m, from Python's polynomial fitting function\n",
    "b,m=np.polynomial.polynomial.polyfit(x,y,1,w=dy)\n",
    "\n",
    "#Write the equation for the best fit line based on the slope and intercept\n",
    "fit = b+m*x\n",
    "\n",
    "#Calculate the error in slope and intercept \n",
    "\n",
    "def Delta(x, dy):\n",
    "    D = (sum(1/dy**2))*(sum(x**2/dy**2))-(sum(x/dy**2))**2\n",
    "    return D\n",
    " \n",
    "D=Delta(x, dy)\n",
    " \n",
    "dm = np.sqrt(1/D*sum(1/dy**2)) #error in slope\n",
    "db = np.sqrt(1/D*sum(x**2/dy**2)) #error in intercept\n",
    "\n",
    "#Calculate the \"goodness of fit\" using linear least squares fitting\n",
    "#(the closer to 0, the better the fit)\n",
    "def LLSFD2(x,y,dy):\n",
    "    N = sum(((y-b-m*x)/dy)**2)\n",
    "    return N\n",
    "                      \n",
    "N = LLSFD2(x,y,dy)\n",
    "\n",
    "#assign annotation positions based on annotation_placement value\n",
    "if annotation_placement==2 or annotation_placement==3:\n",
    "    xpos=0.05\n",
    "elif annotation_placement==1 or annotation_placement==4:\n",
    "    xpos=0.75\n",
    "\n",
    "if annotation_placement==1 or annotation_placement==2:\n",
    "    ypos=[.9,.85,.8]\n",
    "elif annotation_placement==3 or annotation_placement==4:\n",
    "    ypos=[.2,.15,.1]\n",
    "    \n",
    "#-----------------------------------------------------------------------#\n",
    "#Don't need to change anything in this section!\n",
    "\n",
    "#Plot data on graph. Plot error bars and place values for slope, \n",
    "#error in slope and goodness of fit on the plot using \"annotate\"\n",
    "\n",
    "plt.figure(figsize=(15,10))\n",
    " \n",
    "plt.plot(x, fit, color='green', linestyle='--')\n",
    "plt.scatter(x, y, color='blue', marker='o')\n",
    " \n",
    "plt.xlabel(x_label)\n",
    "plt.ylabel(y_label)\n",
    "plt.title(plot_title)\n",
    " \n",
    "plt.errorbar(x, y, yerr=dy, xerr=None, fmt=\"none\") #don't need to plot x error bars\n",
    " \n",
    "plt.annotate('Slope ({}) = {value:.{digits}E}'.format(slope_units,value=m, digits=2),\n",
    "             (xpos, ypos[0]), xycoords='axes fraction')\n",
    " \n",
    "plt.annotate('Error in Slope ({}) = {value:.{digits}E}'.format(slope_units,value=dm, digits=1),\n",
    "             (xpos, ypos[1]), xycoords='axes fraction')\n",
    " \n",
    "plt.annotate('Goodness of fit = {value:.{digits}E}'.format(value=N, digits=2),\n",
    "             (xpos, ypos[2]), xycoords='axes fraction')\n",
    "\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
